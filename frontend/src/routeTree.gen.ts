/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as LoginRouteImport } from './routes/login'
import { Route as HiddenRouteImport } from './routes/hidden'
import { Route as ForbiddenRouteImport } from './routes/forbidden'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PostsCreateRouteImport } from './routes/posts/create'
import { Route as PostsPostIdIndexRouteImport } from './routes/posts/$postId/index'
import { Route as PostsPostIdHiddenRouteImport } from './routes/posts/$postId/hidden'
import { Route as PostsPostIdEditRouteImport } from './routes/posts/$postId/edit'

const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const HiddenRoute = HiddenRouteImport.update({
  id: '/hidden',
  path: '/hidden',
  getParentRoute: () => rootRouteImport,
} as any)
const ForbiddenRoute = ForbiddenRouteImport.update({
  id: '/forbidden',
  path: '/forbidden',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsCreateRoute = PostsCreateRouteImport.update({
  id: '/posts/create',
  path: '/posts/create',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsPostIdIndexRoute = PostsPostIdIndexRouteImport.update({
  id: '/posts/$postId/',
  path: '/posts/$postId/',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsPostIdHiddenRoute = PostsPostIdHiddenRouteImport.update({
  id: '/posts/$postId/hidden',
  path: '/posts/$postId/hidden',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsPostIdEditRoute = PostsPostIdEditRouteImport.update({
  id: '/posts/$postId/edit',
  path: '/posts/$postId/edit',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/forbidden': typeof ForbiddenRoute
  '/hidden': typeof HiddenRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/posts/create': typeof PostsCreateRoute
  '/posts/$postId/edit': typeof PostsPostIdEditRoute
  '/posts/$postId/hidden': typeof PostsPostIdHiddenRoute
  '/posts/$postId': typeof PostsPostIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/forbidden': typeof ForbiddenRoute
  '/hidden': typeof HiddenRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/posts/create': typeof PostsCreateRoute
  '/posts/$postId/edit': typeof PostsPostIdEditRoute
  '/posts/$postId/hidden': typeof PostsPostIdHiddenRoute
  '/posts/$postId': typeof PostsPostIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/forbidden': typeof ForbiddenRoute
  '/hidden': typeof HiddenRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/posts/create': typeof PostsCreateRoute
  '/posts/$postId/edit': typeof PostsPostIdEditRoute
  '/posts/$postId/hidden': typeof PostsPostIdHiddenRoute
  '/posts/$postId/': typeof PostsPostIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/forbidden'
    | '/hidden'
    | '/login'
    | '/signup'
    | '/posts/create'
    | '/posts/$postId/edit'
    | '/posts/$postId/hidden'
    | '/posts/$postId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/forbidden'
    | '/hidden'
    | '/login'
    | '/signup'
    | '/posts/create'
    | '/posts/$postId/edit'
    | '/posts/$postId/hidden'
    | '/posts/$postId'
  id:
    | '__root__'
    | '/'
    | '/forbidden'
    | '/hidden'
    | '/login'
    | '/signup'
    | '/posts/create'
    | '/posts/$postId/edit'
    | '/posts/$postId/hidden'
    | '/posts/$postId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ForbiddenRoute: typeof ForbiddenRoute
  HiddenRoute: typeof HiddenRoute
  LoginRoute: typeof LoginRoute
  SignupRoute: typeof SignupRoute
  PostsCreateRoute: typeof PostsCreateRoute
  PostsPostIdEditRoute: typeof PostsPostIdEditRoute
  PostsPostIdHiddenRoute: typeof PostsPostIdHiddenRoute
  PostsPostIdIndexRoute: typeof PostsPostIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/hidden': {
      id: '/hidden'
      path: '/hidden'
      fullPath: '/hidden'
      preLoaderRoute: typeof HiddenRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/forbidden': {
      id: '/forbidden'
      path: '/forbidden'
      fullPath: '/forbidden'
      preLoaderRoute: typeof ForbiddenRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts/create': {
      id: '/posts/create'
      path: '/posts/create'
      fullPath: '/posts/create'
      preLoaderRoute: typeof PostsCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts/$postId/': {
      id: '/posts/$postId/'
      path: '/posts/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts/$postId/hidden': {
      id: '/posts/$postId/hidden'
      path: '/posts/$postId/hidden'
      fullPath: '/posts/$postId/hidden'
      preLoaderRoute: typeof PostsPostIdHiddenRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts/$postId/edit': {
      id: '/posts/$postId/edit'
      path: '/posts/$postId/edit'
      fullPath: '/posts/$postId/edit'
      preLoaderRoute: typeof PostsPostIdEditRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ForbiddenRoute: ForbiddenRoute,
  HiddenRoute: HiddenRoute,
  LoginRoute: LoginRoute,
  SignupRoute: SignupRoute,
  PostsCreateRoute: PostsCreateRoute,
  PostsPostIdEditRoute: PostsPostIdEditRoute,
  PostsPostIdHiddenRoute: PostsPostIdHiddenRoute,
  PostsPostIdIndexRoute: PostsPostIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
